{"version":3,"sources":["Square.js","Board.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","className","onClick","value","Board","squares","this","len","length","board_contents","board_row","i","push","square_val","square","onSquareClick","renderBoard","Component","Game","state","history","Array","fill","stepNumber","xIsNext","win_possibilities","a","b","c","slice","hist_len","new_squares","findWinner","setState","concat","step","current","moves","map","move","desc","jumpTo","winner","status","handleSquareClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPAUeA,MAPf,SAAgBC,GAEd,OACG,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAAUF,EAAMG,QCmChDC,E,4KA5BX,IAND,IAAD,OACQC,EAAUC,KAAKN,MAAMK,QACrBE,EAAMF,EAAQG,OAChBC,EAAiB,GACjBC,EAAY,GAJlB,WAMUC,GAEHA,EAAI,GAAKA,EAAE,IAAM,IAElBF,EAAeG,KAAK,yBAAKX,UAAU,aAAaS,IAChDA,EAAY,IAGd,IAAIG,EAAaR,EAAQM,GAEzBE,EAAaA,GAA0B,GAEvC,IAAMC,EAAS,kBAAC,EAAD,CAAQX,MAAOU,EAAYX,QAAS,kBAAM,EAAKF,MAAMe,cAAcJ,MAElFD,EAAUE,KAAKE,IAdTH,EAAI,EAAGA,EAAIJ,EAAKI,IACvB,EADOA,GAmBR,OAFAF,EAAeG,KAAK,yBAAKX,UAAU,aAAaS,IAEzCD,I,+BAKP,OAAO,6BAAOH,KAAKU,mB,GAjCHC,aC4FLC,E,kDA1Fb,WAAYlB,GACX,IAAD,8BACE,cAAMA,IAEDmB,MAAQ,CACEC,QAAU,CAAC,CAACf,QAAUgB,MAAM,GAAGC,KAAK,QACpCC,WAAa,EACbC,SAAU,GAN3B,E,uDAUWnB,GAMT,IAJA,IAAMoB,EAAoB,CAAE,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,IAE1FlB,EAAMkB,EAAkBjB,OAEtBG,EAAI,EAAGA,EAAIJ,EAAKI,IACxB,CAAC,IAAD,cACkBc,EAAkBd,GADpC,GACSe,EADT,KACWC,EADX,KACaC,EADb,KAGE,GAAGvB,EAAQqB,IAAMrB,EAAQqB,KAAOrB,EAAQsB,IAAMtB,EAAQqB,KAAOrB,EAAQuB,GAEnE,OAAOvB,EAAQqB,GAInB,OAAO,O,wCAGSf,GAEhB,IAAMS,EAAUd,KAAKa,MAAMC,QAAQS,MAAM,EAAGvB,KAAKa,MAAMI,WAAW,GAC5DO,EAAWV,EAAQZ,OAEnBuB,EADUX,EAAQU,EAAW,GACPzB,QAAQwB,QAEpC,GAAGE,EAAYpB,IAAML,KAAK0B,WAAWD,GAEnC,OAAO,EAGTA,EAAYpB,GAAKL,KAAKa,MAAMK,QAAU,IAAM,IAC5ClB,KAAK2B,SAAS,CAAEb,QAAUA,EAAQc,OAAO,CAAC,CAAC7B,QAAU0B,KAAgBR,WAAaO,EAAUN,SAAWlB,KAAKa,MAAMK,Y,6BAG7GW,GAEL7B,KAAK2B,SAAS,CAAEV,WAAaY,EAAMX,QAAWW,EAAK,IAAO,M,+BAI3D,IAAD,OACQf,EAAUd,KAAKa,MAAMC,QACrBgB,EAAUhB,EAAQd,KAAKa,MAAMI,YAE7Bc,EAAQjB,EAAQkB,KAAI,SAACH,EAAKI,GAE9B,IAAMC,EAAOD,EAAO,gBAAgBA,EAAO,cAE3C,MAAO,CAAC,4BAAI,4BAAQrC,QAAS,kBAAM,EAAKuC,OAAOF,KAASC,QAGpDE,EAASpC,KAAK0B,WAAWI,EAAQ/B,SAEnCsC,EAAS,GAWb,OAPEA,EAFCD,EAEQ,eAAiBA,EAIjB,kBAAoBpC,KAAKa,MAAMK,QAAU,IAAM,KAIlD,yBAAKvB,UAAU,QACb,yBAAKA,UAAU,cAClB,kBAAC,EAAD,CAAOI,QAAS+B,EAAQ/B,QAASU,cAAe,SAACJ,GAAD,OAAO,EAAKiC,kBAAkBjC,OAEhF,yBAAKV,UAAU,aACb,6BAAO0C,GACd,4BAAMN,S,GArFSpB,aCOJ4B,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4bdaf5ea.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Square(props) \n{\n  return(\n  \t  <button className=\"square\" onClick={props.onClick}>{props.value}</button>  \n  \t);\n}\n\nexport default Square;\n","import React, {Component} from 'react';\nimport Square from './Square';\nimport './App.css';\n\nclass Board extends Component \n{\n  renderBoard()\n  {\n    const squares = this.props.squares;\n    const len = squares.length;\n    let board_contents = [];\n    let board_row = [];\n     \t\n    for(let i = 0; i < len; i++)\n    {\n      if(i > 0 && i%3 === 0)\n      {\n        board_contents.push(<div className=\"board-row\">{board_row}</div>);\n        board_row = [];\n      }\n      \t  \n      let square_val = squares[i];\n      \t  \n      square_val = square_val ? square_val : ''; \n      \t  \n      const square = <Square value={square_val} onClick={() => this.props.onSquareClick(i)} />;\n      \t  \n      board_row.push(square);\n    }\n  \t\n    board_contents.push(<div className=\"board-row\">{board_row}</div>);\n    \t\n    return board_contents;\n  }\n  \n  render()\n  {\n    return(<div>{ this.renderBoard() }</div>);\n  }\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass Game extends Component \n{\n  constructor(props)\n  {\n    super(props);\n    \n    this.state = {\n                   history : [{squares : Array(9).fill(null)}],\n                   stepNumber : 0,\n                   xIsNext : true\n    \t\t  };\n  }\n  \n  findWinner(squares)\n  {\n    const win_possibilities = [ [0,1,2], [3,4,5], [6,7,8], [0,3,6], [1,4,7], [2,5,8], [0,4,8], [2,4,6] ];\n     \t\n    const len = win_possibilities.length;\n    \t\n    for(let i = 0; i < len; i++)\n    {\n      const [a,b,c] = win_possibilities[i];\n      \t  \n      if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n      {\n        return squares[a];\n      }\n    }\n    \t\n    return null;\n  }\n  \n  handleSquareClick(i)\n  {\n    const history = this.state.history.slice(0, this.state.stepNumber+1);\n    const hist_len = history.length;\n    const current = history[hist_len - 1];\n    const new_squares = current.squares.slice();\n      \t\t\n    if(new_squares[i] || this.findWinner(new_squares))\n    {\n      return true;\n    }\n    \t\n    new_squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({ history : history.concat([{squares : new_squares}]), stepNumber : hist_len, xIsNext : !this.state.xIsNext });\n  }\n  \n  jumpTo(step)\n  {\n    this.setState({ stepNumber : step, xIsNext : (step%2) === 0  });\n  }\n  \n  render()\n  {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    \n    const moves = history.map((step,move) => \n    {\n      const desc = move ? 'Go To Move : '+move : 'Go To Start';\n      \n      return([<li><button onClick={() => this.jumpTo(move)}>{ desc }</button></li>]);  \n    });\n    \n    const winner = this.findWinner(current.squares);\n    \t\n    let status = '';\n    \t\n    if(winner)\n    {\n      status = 'Winner is : ' + winner;\n    }\n    else\n    {\n      status = 'Next Player : ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    \n    return(\n            <div className=\"game\">\n              <div className=\"game-board\">\n  \t        <Board squares={current.squares} onSquareClick={(i) => this.handleSquareClick(i)} />\n  \t      </div>\n  \t      <div className=\"game-info\">\n  \t        <div>{ status }</div>\n  \t\t<ol>{ moves }</ol>\n  \t      </div>\n  \t    </div>\n  \t  );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <Game />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}